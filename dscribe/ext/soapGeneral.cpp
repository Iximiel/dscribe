/*Copyright 2019 DScribe developers

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#include "soapGeneral.h"
#include "weighting.h"
#include <algorithm>
#include <array>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <map>
#include <set>

//#define sd sizeof(double)
#define PI 3.14159265359

namespace SOAPconstants {
constexpr std ::array<double, 1326> factorList = {
    /*0*/ 0.2820947917738781,
    /*1*/ 0.4886025119029199,
    /*2*/ 0.3454941494713355,
    /*3*/ 0.6307831305050401,
    /*4*/ 0.2575161346821264,
    /*5*/ 0.1287580673410632,
    /*6*/ 0.7463526651802308,
    /*7*/ 0.2154534560761004,
    /*8*/ 0.06813236509555216,
    /*9*/ 0.02781492157551894,
    /*10*/ 0.8462843753216345,
    /*11*/ 0.189234939151512,
    /*12*/ 0.04460310290381928,
    /*13*/ 0.0119206806752224,
    /*14*/ 0.004214597070904597,
    /*15*/ 0.9356025796273888,
    /*16*/ 0.1708168792406481,
    /*17*/ 0.03228135587163618,
    /*18*/ 0.006589404174225528,
    /*19*/ 0.001553137458524604,
    /*20*/ 0.000491145188826305,
    /*21*/ 1.017107236282055,
    /*22*/ 0.156943053829006,
    /*23*/ 0.02481487565210345,
    /*24*/ 0.00413581260868391,
    /*25*/ 0.0007550926197968211,
    /*26*/ 0.0001609862874555169,
    /*27*/ 4.647273819914057e-05,
    /*28*/ 1.092548430592079,
    /*29*/ 0.1459979252047546,
    /*30*/ 0.01986780112537067,
    /*31*/ 0.002809731380603064,
    /*32*/ 0.000423582943233983,
    /*33*/ 7.059715720566384e-05,
    /*34*/ 1.384524162291759e-05,
    /*35*/ 3.700296470718546e-06,
    /*36*/ 1.16310662292032,
    /*37*/ 0.1370734300516571,
    /*38*/ 0.01638340851773374,
    /*39*/ 0.002016658181771346,
    /*40*/ 0.0002603494517664451,
    /*41*/ 3.610397299549447e-05,
    /*42*/ 5.5709639801457e-06,
    /*43*/ 1.017114212991521e-06,
    /*44*/ 2.542785532478802e-07,
    /*45*/ 1.229622689841484,
    /*46*/ 0.1296136120840625,
    /*47*/ 0.01381685747288017,
    /*48*/ 0.001507542743711658,
    /*49*/ 0.0001706956026696042,
    /*50*/ 2.040202677982873e-05,
    /*51*/ 2.633890331571813e-06,
    /*52*/ 3.801693229872348e-07,
    /*53*/ 6.519850100689623e-08,
    /*54*/ 1.536743406172475e-08,
    /*55*/ 1.292720736456603,
    /*56*/ 0.1232560860553381,
    /*57*/ 0.01186032241055152,
    /*58*/ 0.001163000296325078,
    /*59*/ 0.0001174807708647752,
    /*60*/ 1.23835605735013e-05,
    /*61*/ 1.384524162291759e-06,
    /*62*/ 1.678982165396686e-07,
    /*63*/ 2.284805329141706e-08,
    /*64*/ 3.706443675005072e-09,
    /*65*/ 0.0,
    /*66*/ 1.352879094951503,
    /*67*/ 0.1177530108203118,
    /*68*/ 0.01032762224375018,
    /*69*/ 0.0009200577156223507,
    /*70*/ 8.398939417550579e-05,
    /*71*/ 7.936251776977327e-06,
    /*72*/ 7.858060197418365e-07,
    /*73*/ 8.283122738184806e-08,
    /*74*/ 9.501393408603022e-09,
    /*75*/ 1.226624614576148e-09,
    /*76*/ 0.0,
    /*77*/ 0.0,
    /*78*/ 1.410473958869391,
    /*79*/ 0.112928295511954,
    /*80*/ 0.00910002138117768,
    /*81*/ 0.0007430136344100779,
    /*82*/ 6.191780286750648e-05,
    /*83*/ 5.309407793455069e-06,
    /*84*/ 4.729996402327689e-07,
    /*85*/ 4.430047519252571e-08,
    /*86*/ 4.430047519252572e-09,
    /*87*/ 0.0,
    /*88*/ 0.0,
    /*89*/ 0.0,
    /*90*/ 0.0,
    /*91*/ 1.46580753570876,
    /*92*/ 0.1086528834200811,
    /*93*/ 0.008098507775955371,
    /*94*/ 0.0006104479921504446,
    /*95*/ 4.681922374915654e-05,
    /*96*/ 3.678465622546537e-06,
    /*97*/ 2.983629604350772e-07,
    /*98*/ 2.521627254651016e-08,
    /*99*/ 2.246444105727492e-09,
    /*100*/ 0.0,
    /*101*/ 0.0,
    /*102*/ 0.0,
    /*103*/ 0.0,
    /*104*/ 0.0,
    /*105*/ 1.519126944936625,
    /*106*/ 0.1048297184969734,
    /*107*/ 0.007268633177563331,
    /*108*/ 0.0005089061138323581,
    /*109*/ 3.616638267560285e-05,
    /*110*/ 2.623785168354005e-06,
    /*111*/ 1.955653998265095e-07,
    /*112*/ 1.508819816495316e-08,
    /*113*/ 1.215841656708486e-09,
    /*114*/ 0.0,
    /*115*/ 0.0,
    /*116*/ 0.0,
    /*117*/ 0.0,
    /*118*/ 0.0,
    /*119*/ 0.0,
    /*120*/ 1.570637328578554,
    /*121*/ 0.1013842036086075,
    /*122*/ 0.006571761828847014,
    /*123*/ 0.0004296095103073734,
    /*124*/ 2.845158486524923e-05,
    /*125*/ 1.918205460301229e-06,
    /*126*/ 1.323687523896326e-07,
    /*127*/ 9.407037610856029e-09,
    /*128*/ 0.0,
    /*129*/ 0.0,
    /*130*/ 0.0,
    /*131*/ 0.0,
    /*132*/ 0.0,
    /*133*/ 0.0,
    /*134*/ 0.0,
    /*135*/ 0.0,
    /*136*/ 1.620511203607144,
    /*137*/ 0.09825792441130971,
    /*138*/ 0.005979786850412427,
    /*139*/ 0.000366644255972276,
    /*140*/ 2.273831148908952e-05,
    /*141*/ 1.432378986515563e-06,
    /*142*/ 9.207680859947902e-08,
    /*143*/ 6.071364964309775e-09,
    /*144*/ 0.0,
    /*145*/ 0.0,
    /*146*/ 0.0,
    /*147*/ 0.0,
    /*148*/ 0.0,
    /*149*/ 0.0,
    /*150*/ 0.0,
    /*151*/ 0.0,
    /*152*/ 0.0,
    /*153*/ 1.668895294531136,
    /*154*/ 0.09540439392102681,
    /*155*/ 0.005471817261467132,
    /*156*/ 0.000315915516886449,
    /*157*/ 1.842456709998578e-05,
    /*158*/ 1.089467491695421e-06,
    /*159*/ 6.557823669848324e-08,
    /*160*/ 4.036061465505948e-09,
    /*161*/ 0.0,
    /*162*/ 0.0,
    /*163*/ 0.0,
    /*164*/ 0.0,
    /*165*/ 0.0,
    /*166*/ 0.0,
    /*167*/ 0.0,
    /*168*/ 0.0,
    /*169*/ 0.0,
    /*170*/ 0.0,
    /*171*/ 1.715915629394424,
    /*172*/ 0.09278609064695012,
    /*173*/ 0.005032032280811556,
    /*174*/ 0.0002745198669795266,
    /*175*/ 1.511182131758837e-05,
    /*176*/ 8.421488772623757e-07,
    /*177*/ 4.76772916527422e-08,
    /*178*/ 2.7526497169943e-09,
    /*179*/ 0.0,
    /*180*/ 0.0,
    /*181*/ 0.0,
    /*182*/ 0.0,
    /*183*/ 0.0,
    /*184*/ 0.0,
    /*185*/ 0.0,
    /*186*/ 0.0,
    /*187*/ 0.0,
    /*188*/ 0.0,
    /*189*/ 0.0,
    /*190*/ 1.761681409986482,
    /*191*/ 0.09037234949584909,
    /*192*/ 0.004648252090384827,
    /*193*/ 0.0002403553935931609,
    /*194*/ 1.252939101513388e-05,
    /*195*/ 6.603568883778713e-07,
    /*196*/ 3.529756041865882e-08,
    /*197*/ 1.919934179336579e-09,
    /*198*/ 0.0,
    /*199*/ 0.0,
    /*200*/ 0.0,
    /*201*/ 0.0,
    /*202*/ 0.0,
    /*203*/ 0.0,
    /*204*/ 0.0,
    /*205*/ 0.0,
    /*206*/ 0.0,
    /*207*/ 0.0,
    /*208*/ 0.0,
    /*209*/ 0.0,
    /*210*/ 1.806287998460892,
    /*211*/ 0.08813782947320221,
    /*212*/ 0.004310962154688459,
    /*213*/ 0.0002118722309989988,
    /*214*/ 1.048923844743225e-05,
    /*215*/ 5.244619223716127e-07,
    /*216*/ 2.65571617661055e-08,
    /*217*/ 1.365953008665088e-09,
    /*218*/ 0.0,
    /*219*/ 0.0,
    /*220*/ 0.0,
    /*221*/ 0.0,
    /*222*/ 0.0,
    /*223*/ 0.0,
    /*224*/ 0.0,
    /*225*/ 0.0,
    /*226*/ 0.0,
    /*227*/ 0.0,
    /*228*/ 0.0,
    /*229*/ 0.0,
    /*230*/ 0.0,
    /*231*/ 1.84981925508298,
    /*232*/ 0.0860613804472887,
    /*233*/ 0.004012632553544782,
    /*234*/ 0.0001879087358370432,
    /*235*/ 8.858102756970991e-06,
    /*236*/ 4.213369811727295e-07,
    /*237*/ 2.027158495830164e-08,
    /*238*/ 0.0,
    /*239*/ 0.0,
    /*240*/ 0.0,
    /*241*/ 0.0,
    /*242*/ 0.0,
    /*243*/ 0.0,
    /*244*/ 0.0,
    /*245*/ 0.0,
    /*246*/ 0.0,
    /*247*/ 0.0,
    /*248*/ 0.0,
    /*249*/ 0.0,
    /*250*/ 0.0,
    /*251*/ 0.0,
    /*252*/ 0.0,
    /*253*/ 1.89234939151512,
    /*254*/ 0.08412519161795824,
    /*255*/ 0.003747233864656032,
    /*256*/ 0.0001675813929792027,
    /*257*/ 7.539843326915562e-06,
    /*258*/ 3.420142387309604e-07,
    /*259*/ 1.567619693034596e-08,
    /*260*/ 0.0,
    /*261*/ 0.0,
    /*262*/ 0.0,
    /*263*/ 0.0,
    /*264*/ 0.0,
    /*265*/ 0.0,
    /*266*/ 0.0,
    /*267*/ 0.0,
    /*268*/ 0.0,
    /*269*/ 0.0,
    /*270*/ 0.0,
    /*271*/ 0.0,
    /*272*/ 0.0,
    /*273*/ 0.0,
    /*274*/ 0.0,
    /*275*/ 0.0,
    /*276*/ 1.933944456973762,
    /*277*/ 0.08231414245617984,
    /*278*/ 0.003509886827571061,
    /*279*/ 0.0001502092895384877,
    /*280*/ 6.463978631424566e-06,
    /*281*/ 2.802490157049559e-07,
    /*282*/ 1.226616618822204e-08,
    /*283*/ 0.0,
    /*284*/ 0.0,
    /*285*/ 0.0,
    /*286*/ 0.0,
    /*287*/ 0.0,
    /*288*/ 0.0,
    /*289*/ 0.0,
    /*290*/ 0.0,
    /*291*/ 0.0,
    /*292*/ 0.0,
    /*293*/ 0.0,
    /*294*/ 0.0,
    /*295*/ 0.0,
    /*296*/ 0.0,
    /*297*/ 0.0,
    /*298*/ 0.0,
    /*299*/ 0.0,
    /*300*/ 1.974663542417147,
    /*301*/ 0.0806153015433116,
    /*302*/ 0.003296604831679497,
    /*303*/ 0.0001352613346337005,
    /*304*/ 5.578083425836789e-06,
    /*305*/ 2.31617307381405e-07,
    /*306*/ 9.701381442470045e-09,
    /*307*/ 0.0,
    /*308*/ 0.0,
    /*309*/ 0.0,
    /*310*/ 0.0,
    /*311*/ 0.0,
    /*312*/ 0.0,
    /*313*/ 0.0,
    /*314*/ 0.0,
    /*315*/ 0.0,
    /*316*/ 0.0,
    /*317*/ 0.0,
    /*318*/ 0.0,
    /*319*/ 0.0,
    /*320*/ 0.0,
    /*321*/ 0.0,
    /*322*/ 0.0,
    /*323*/ 0.0,
    /*324*/ 0.0,
    /*325*/ 2.014559765517849,
    /*326*/ 0.07901753504364936,
    /*327*/ 0.00310410193677834,
    /*328*/ 0.0001223187519200979,
    /*329*/ 4.842645762398801e-06,
    /*330*/ 1.929356253363671e-07,
    /*331*/ 7.748481175203037e-09,
    /*332*/ 0.0,
    /*333*/ 0.0,
    /*334*/ 0.0,
    /*335*/ 0.0,
    /*336*/ 0.0,
    /*337*/ 0.0,
    /*338*/ 0.0,
    /*339*/ 0.0,
    /*340*/ 0.0,
    /*341*/ 0.0,
    /*342*/ 0.0,
    /*343*/ 0.0,
    /*344*/ 0.0,
    /*345*/ 0.0,
    /*346*/ 0.0,
    /*347*/ 0.0,
    /*348*/ 0.0,
    /*349*/ 0.0,
    /*350*/ 0.0,
    /*351*/ 2.053681083307539,
    /*352*/ 0.07751119753621069,
    /*353*/ 0.002929647892908799,
    /*354*/ 0.0001110480167994608,
    /*355*/ 4.227525749644037e-06,
    /*356*/ 1.618803274529695e-07,
    /*357*/ 6.244669204738395e-09,
    /*358*/ 0.0,
    /*359*/ 0.0,
    /*360*/ 0.0,
    /*361*/ 0.0,
    /*362*/ 0.0,
    /*363*/ 0.0,
    /*364*/ 0.0,
    /*365*/ 0.0,
    /*366*/ 0.0,
    /*367*/ 0.0,
    /*368*/ 0.0,
    /*369*/ 0.0,
    /*370*/ 0.0,
    /*371*/ 0.0,
    /*372*/ 0.0,
    /*373*/ 0.0,
    /*374*/ 0.0,
    /*375*/ 0.0,
    /*376*/ 0.0,
    /*377*/ 0.0,
    /*378*/ 2.092070967971001,
    /*379*/ 0.07608788547576704,
    /*380*/ 0.002770957355023711,
    /*381*/ 0.0001011810566154225,
    /*382*/ 3.709477511865982e-06,
    /*383*/ 1.367331551655302e-07,
    /*384*/ 5.074643349641621e-09,
    /*385*/ 0.0,
    /*386*/ 0.0,
    /*387*/ 0.0,
    /*388*/ 0.0,
    /*389*/ 0.0,
    /*390*/ 0.0,
    /*391*/ 0.0,
    /*392*/ 0.0,
    /*393*/ 0.0,
    /*394*/ 0.0,
    /*395*/ 0.0,
    /*396*/ 0.0,
    /*397*/ 0.0,
    /*398*/ 0.0,
    /*399*/ 0.0,
    /*400*/ 0.0,
    /*401*/ 0.0,
    /*402*/ 0.0,
    /*403*/ 0.0,
    /*404*/ 0.0,
    /*405*/ 0.0,
    /*406*/ 2.129768972944957,
    /*407*/ 0.07474023881535388,
    /*408*/ 0.002626104305793813,
    /*409*/ 9.250057893259113e-05,
    /*410*/ 3.270389331345833e-06,
    /*411*/ 1.162082247007796e-07,
    /*412*/ 4.155597631240415e-09,
    /*413*/ 0.0,
    /*414*/ 0.0,
    /*415*/ 0.0,
    /*416*/ 0.0,
    /*417*/ 0.0,
    /*418*/ 0.0,
    /*419*/ 0.0,
    /*420*/ 0.0,
    /*421*/ 0.0,
    /*422*/ 0.0,
    /*423*/ 0.0,
    /*424*/ 0.0,
    /*425*/ 0.0,
    /*426*/ 0.0,
    /*427*/ 0.0,
    /*428*/ 0.0,
    /*429*/ 0.0,
    /*430*/ 0.0,
    /*431*/ 0.0,
    /*432*/ 0.0,
    /*433*/ 0.0,
    /*434*/ 0.0,
    /*435*/ 2.166811210329805,
    /*436*/ 0.07346178004805379,
    /*437*/ 0.002493455287686542,
    /*438*/ 8.482907154550921e-05,
    /*439*/ 2.896016752274726e-06,
    /*440*/ 9.933255511282382e-08,
    /*441*/ 3.4272987602418e-09,
    /*442*/ 0.0,
    /*443*/ 0.0,
    /*444*/ 0.0,
    /*445*/ 0.0,
    /*446*/ 0.0,
    /*447*/ 0.0,
    /*448*/ 0.0,
    /*449*/ 0.0,
    /*450*/ 0.0,
    /*451*/ 0.0,
    /*452*/ 0.0,
    /*453*/ 0.0,
    /*454*/ 0.0,
    /*455*/ 0.0,
    /*456*/ 0.0,
    /*457*/ 0.0,
    /*458*/ 0.0,
    /*459*/ 0.0,
    /*460*/ 0.0,
    /*461*/ 0.0,
    /*462*/ 0.0,
    /*463*/ 0.0,
    /*464*/ 0.0,
    /*465*/ 2.203230756026887,
    /*466*/ 0.07224678259981218,
    /*467*/ 0.002371616827193302,
    /*468*/ 7.802046556234715e-05,
    /*469*/ 2.575059075948476e-06,
    /*470*/ 8.536237715559136e-08,
    /*471*/ 2.845412571853045e-09,
    /*472*/ 0.0,
    /*473*/ 0.0,
    /*474*/ 0.0,
    /*475*/ 0.0,
    /*476*/ 0.0,
    /*477*/ 0.0,
    /*478*/ 0.0,
    /*479*/ 0.0,
    /*480*/ 0.0,
    /*481*/ 0.0,
    /*482*/ 0.0,
    /*483*/ 0.0,
    /*484*/ 0.0,
    /*485*/ 0.0,
    /*486*/ 0.0,
    /*487*/ 0.0,
    /*488*/ 0.0,
    /*489*/ 0.0,
    /*490*/ 0.0,
    /*491*/ 0.0,
    /*492*/ 0.0,
    /*493*/ 0.0,
    /*494*/ 0.0,
    /*495*/ 0.0,
    /*496*/ 2.239057995540692,
    /*497*/ 0.07109016244861498,
    /*498*/ 0.002259393678604874,
    /*499*/ 7.195375314183696e-05,
    /*500*/ 2.298478332305522e-06,
    /*501*/ 7.372372688239529e-08,
    /*502*/ 2.376948353998878e-09,
    /*503*/ 0.0,
    /*504*/ 0.0,
    /*505*/ 0.0,
    /*506*/ 0.0,
    /*507*/ 0.0,
    /*508*/ 0.0,
    /*509*/ 0.0,
    /*510*/ 0.0,
    /*511*/ 0.0,
    /*512*/ 0.0,
    /*513*/ 0.0,
    /*514*/ 0.0,
    /*515*/ 0.0,
    /*516*/ 0.0,
    /*517*/ 0.0,
    /*518*/ 0.0,
    /*519*/ 0.0,
    /*520*/ 0.0,
    /*521*/ 0.0,
    /*522*/ 0.0,
    /*523*/ 0.0,
    /*524*/ 0.0,
    /*525*/ 0.0,
    /*526*/ 0.0,
    /*527*/ 0.0,
    /*528*/ 2.274320920733615,
    /*529*/ 0.06998738827464737,
    /*530*/ 0.002155755395657693,
    /*531*/ 6.652805584976738e-05,
    /*532*/ 2.058991638214058e-06,
    /*533*/ 6.396975762177483e-08,
    /*534*/ 1.997105578629141e-09,
    /*535*/ 0.0,
    /*536*/ 0.0,
    /*537*/ 0.0,
    /*538*/ 0.0,
    /*539*/ 0.0,
    /*540*/ 0.0,
    /*541*/ 0.0,
    /*542*/ 0.0,
    /*543*/ 0.0,
    /*544*/ 0.0,
    /*545*/ 0.0,
    /*546*/ 0.0,
    /*547*/ 0.0,
    /*548*/ 0.0,
    /*549*/ 0.0,
    /*550*/ 0.0,
    /*551*/ 0.0,
    /*552*/ 0.0,
    /*553*/ 0.0,
    /*554*/ 0.0,
    /*555*/ 0.0,
    /*556*/ 0.0,
    /*557*/ 0.0,
    /*558*/ 0.0,
    /*559*/ 0.0,
    /*560*/ 0.0,
    /*561*/ 2.309045385777095,
    /*562*/ 0.06893440650860676,
    /*563*/ 0.002059809370664345,
    /*564*/ 6.165878068929182e-05,
    /*565*/ 1.850688996628934e-06,
    /*566*/ 5.574971423464406e-08,
    /*567*/ 1.687063099661222e-09,
    /*568*/ 0.0,
    /*569*/ 0.0,
    /*570*/ 0.0,
    /*571*/ 0.0,
    /*572*/ 0.0,
    /*573*/ 0.0,
    /*574*/ 0.0,
    /*575*/ 0.0,
    /*576*/ 0.0,
    /*577*/ 0.0,
    /*578*/ 0.0,
    /*579*/ 0.0,
    /*580*/ 0.0,
    /*581*/ 0.0,
    /*582*/ 0.0,
    /*583*/ 0.0,
    /*584*/ 0.0,
    /*585*/ 0.0,
    /*586*/ 0.0,
    /*587*/ 0.0,
    /*588*/ 0.0,
    /*589*/ 0.0,
    /*590*/ 0.0,
    /*591*/ 0.0,
    /*592*/ 0.0,
    /*593*/ 0.0,
    /*594*/ 0.0,
    /*595*/ 2.343255328953802,
    /*596*/ 0.0679275784432832,
    /*597*/ 0.001970778938358922,
    /*598*/ 5.727459951756891e-05,
    /*599*/ 1.668742842362807e-06,
    /*600*/ 4.878614306851687e-08,
    /*601*/ 1.43241048209851e-09,
    /*602*/ 0.0,
    /*603*/ 0.0,
    /*604*/ 0.0,
    /*605*/ 0.0,
    /*606*/ 0.0,
    /*607*/ 0.0,
    /*608*/ 0.0,
    /*609*/ 0.0,
    /*610*/ 0.0,
    /*611*/ 0.0,
    /*612*/ 0.0,
    /*613*/ 0.0,
    /*614*/ 0.0,
    /*615*/ 0.0,
    /*616*/ 0.0,
    /*617*/ 0.0,
    /*618*/ 0.0,
    /*619*/ 0.0,
    /*620*/ 0.0,
    /*621*/ 0.0,
    /*622*/ 0.0,
    /*623*/ 0.0,
    /*624*/ 0.0,
    /*625*/ 0.0,
    /*626*/ 0.0,
    /*627*/ 0.0,
    /*628*/ 0.0,
    /*629*/ 0.0,
    /*630*/ 2.376972965719696,
    /*631*/ 0.06696362717842202,
    /*632*/ 0.001887985476978138,
    /*633*/ 5.331505738460513e-05,
    /*634*/ 1.509185376267241e-06,
    /*635*/ 4.285798472617944e-08,
    /*636*/ 1.222022465559807e-09,
    /*637*/ 0.0,
    /*638*/ 0.0,
    /*639*/ 0.0,
    /*640*/ 0.0,
    /*641*/ 0.0,
    /*642*/ 0.0,
    /*643*/ 0.0,
    /*644*/ 0.0,
    /*645*/ 0.0,
    /*646*/ 0.0,
    /*647*/ 0.0,
    /*648*/ 0.0,
    /*649*/ 0.0,
    /*650*/ 0.0,
    /*651*/ 0.0,
    /*652*/ 0.0,
    /*653*/ 0.0,
    /*654*/ 0.0,
    /*655*/ 0.0,
    /*656*/ 0.0,
    /*657*/ 0.0,
    /*658*/ 0.0,
    /*659*/ 0.0,
    /*660*/ 0.0,
    /*661*/ 0.0,
    /*662*/ 0.0,
    /*663*/ 0.0,
    /*664*/ 0.0,
    /*665*/ 0.0,
    /*666*/ 2.410218957450584,
    /*667*/ 0.06603959263150834,
    /*668*/ 0.00181083368723047,
    /*669*/ 4.97286653043065e-05,
    /*670*/ 1.368736464703448e-06,
    /*671*/ 3.778791414787301e-08,
    /*672*/ 1.047242907767924e-09,
    /*673*/ 0.0,
    /*674*/ 0.0,
    /*675*/ 0.0,
    /*676*/ 0.0,
    /*677*/ 0.0,
    /*678*/ 0.0,
    /*679*/ 0.0,
    /*680*/ 0.0,
    /*681*/ 0.0,
    /*682*/ 0.0,
    /*683*/ 0.0,
    /*684*/ 0.0,
    /*685*/ 0.0,
    /*686*/ 0.0,
    /*687*/ 0.0,
    /*688*/ 0.0,
    /*689*/ 0.0,
    /*690*/ 0.0,
    /*691*/ 0.0,
    /*692*/ 0.0,
    /*693*/ 0.0,
    /*694*/ 0.0,
    /*695*/ 0.0,
    /*696*/ 0.0,
    /*697*/ 0.0,
    /*698*/ 0.0,
    /*699*/ 0.0,
    /*700*/ 0.0,
    /*701*/ 0.0,
    /*702*/ 0.0,
    /*703*/ 2.4430125595146,
    /*704*/ 0.06515279320386852,
    /*705*/ 0.001738799415163349,
    /*706*/ 4.647136911331539e-05,
    /*707*/ 1.244669595191882e-06,
    /*708*/ 3.34327780809931e-08,
    /*709*/ 0.0,
    /*710*/ 0.0,
    /*711*/ 0.0,
    /*712*/ 0.0,
    /*713*/ 0.0,
    /*714*/ 0.0,
    /*715*/ 0.0,
    /*716*/ 0.0,
    /*717*/ 0.0,
    /*718*/ 0.0,
    /*719*/ 0.0,
    /*720*/ 0.0,
    /*721*/ 0.0,
    /*722*/ 0.0,
    /*723*/ 0.0,
    /*724*/ 0.0,
    /*725*/ 0.0,
    /*726*/ 0.0,
    /*727*/ 0.0,
    /*728*/ 0.0,
    /*729*/ 0.0,
    /*730*/ 0.0,
    /*731*/ 0.0,
    /*732*/ 0.0,
    /*733*/ 0.0,
    /*734*/ 0.0,
    /*735*/ 0.0,
    /*736*/ 0.0,
    /*737*/ 0.0,
    /*738*/ 0.0,
    /*739*/ 0.0,
    /*740*/ 0.0,
    /*741*/ 2.475371751684577,
    /*742*/ 0.06430079296874097,
    /*743*/ 0.001671419524626688,
    /*744*/ 4.35053124758359e-05,
    /*745*/ 1.134706714967917e-06,
    /*746*/ 2.967631270159956e-08,
    /*747*/ 0.0,
    /*748*/ 0.0,
    /*749*/ 0.0,
    /*750*/ 0.0,
    /*751*/ 0.0,
    /*752*/ 0.0,
    /*753*/ 0.0,
    /*754*/ 0.0,
    /*755*/ 0.0,
    /*756*/ 0.0,
    /*757*/ 0.0,
    /*758*/ 0.0,
    /*759*/ 0.0,
    /*760*/ 0.0,
    /*761*/ 0.0,
    /*762*/ 0.0,
    /*763*/ 0.0,
    /*764*/ 0.0,
    /*765*/ 0.0,
    /*766*/ 0.0,
    /*767*/ 0.0,
    /*768*/ 0.0,
    /*769*/ 0.0,
    /*770*/ 0.0,
    /*771*/ 0.0,
    /*772*/ 0.0,
    /*773*/ 0.0,
    /*774*/ 0.0,
    /*775*/ 0.0,
    /*776*/ 0.0,
    /*777*/ 0.0,
    /*778*/ 0.0,
    /*779*/ 0.0,
    /*780*/ 2.507313353398387,
    /*781*/ 0.06348137346502772,
    /*782*/ 0.001608283431176744,
    /*783*/ 4.079783155811154e-05,
    /*784*/ 1.036935164213738e-06,
    /*785*/ 2.642355470722224e-08,
    /*786*/ 0.0,
    /*787*/ 0.0,
    /*788*/ 0.0,
    /*789*/ 0.0,
    /*790*/ 0.0,
    /*791*/ 0.0,
    /*792*/ 0.0,
    /*793*/ 0.0,
    /*794*/ 0.0,
    /*795*/ 0.0,
    /*796*/ 0.0,
    /*797*/ 0.0,
    /*798*/ 0.0,
    /*799*/ 0.0,
    /*800*/ 0.0,
    /*801*/ 0.0,
    /*802*/ 0.0,
    /*803*/ 0.0,
    /*804*/ 0.0,
    /*805*/ 0.0,
    /*806*/ 0.0,
    /*807*/ 0.0,
    /*808*/ 0.0,
    /*809*/ 0.0,
    /*810*/ 0.0,
    /*811*/ 0.0,
    /*812*/ 0.0,
    /*813*/ 0.0,
    /*814*/ 0.0,
    /*815*/ 0.0,
    /*816*/ 0.0,
    /*817*/ 0.0,
    /*818*/ 0.0,
    /*819*/ 0.0,
    /*820*/ 2.538853125964903,
    /*821*/ 0.06269250935154659,
    /*822*/ 0.001549025990553454,
    /*823*/ 3.832063337304655e-05,
    /*824*/ 9.497416376052678e-07,
    /*825*/ 2.359652069719277e-08,
    /*826*/ 0.0,
    /*827*/ 0.0,
    /*828*/ 0.0,
    /*829*/ 0.0,
    /*830*/ 0.0,
    /*831*/ 0.0,
    /*832*/ 0.0,
    /*833*/ 0.0,
    /*834*/ 0.0,
    /*835*/ 0.0,
    /*836*/ 0.0,
    /*837*/ 0.0,
    /*838*/ 0.0,
    /*839*/ 0.0,
    /*840*/ 0.0,
    /*841*/ 0.0,
    /*842*/ 0.0,
    /*843*/ 0.0,
    /*844*/ 0.0,
    /*845*/ 0.0,
    /*846*/ 0.0,
    /*847*/ 0.0,
    /*848*/ 0.0,
    /*849*/ 0.0,
    /*850*/ 0.0,
    /*851*/ 0.0,
    /*852*/ 0.0,
    /*853*/ 0.0,
    /*854*/ 0.0,
    /*855*/ 0.0,
    /*856*/ 0.0,
    /*857*/ 0.0,
    /*858*/ 0.0,
    /*859*/ 0.0,
    /*860*/ 0.0,
    /*861*/ 2.570005863478459,
    /*862*/ 0.06193234731236989,
    /*863*/ 0.001493321497577769,
    /*864*/ 3.604912065120161e-05,
    /*865*/ 8.71759362326571e-07,
    /*866*/ 2.113084392782858e-08,
    /*867*/ 0.0,
    /*868*/ 0.0,
    /*869*/ 0.0,
    /*870*/ 0.0,
    /*871*/ 0.0,
    /*872*/ 0.0,
    /*873*/ 0.0,
    /*874*/ 0.0,
    /*875*/ 0.0,
    /*876*/ 0.0,
    /*877*/ 0.0,
    /*878*/ 0.0,
    /*879*/ 0.0,
    /*880*/ 0.0,
    /*881*/ 0.0,
    /*882*/ 0.0,
    /*883*/ 0.0,
    /*884*/ 0.0,
    /*885*/ 0.0,
    /*886*/ 0.0,
    /*887*/ 0.0,
    /*888*/ 0.0,
    /*889*/ 0.0,
    /*890*/ 0.0,
    /*891*/ 0.0,
    /*892*/ 0.0,
    /*893*/ 0.0,
    /*894*/ 0.0,
    /*895*/ 0.0,
    /*896*/ 0.0,
    /*897*/ 0.0,
    /*898*/ 0.0,
    /*899*/ 0.0,
    /*900*/ 0.0,
    /*901*/ 0.0,
    /*902*/ 0.0,
    /*903*/ 2.60078547393005,
    /*904*/ 0.06119918771222799,
    /*905*/ 0.001440878600036247,
    /*906*/ 3.396183429840699e-05,
    /*907*/ 8.018256026422763e-07,
    /*908*/ 1.897313915903101e-08,
    /*909*/ 0.0,
    /*910*/ 0.0,
    /*911*/ 0.0,
    /*912*/ 0.0,
    /*913*/ 0.0,
    /*914*/ 0.0,
    /*915*/ 0.0,
    /*916*/ 0.0,
    /*917*/ 0.0,
    /*918*/ 0.0,
    /*919*/ 0.0,
    /*920*/ 0.0,
    /*921*/ 0.0,
    /*922*/ 0.0,
    /*923*/ 0.0,
    /*924*/ 0.0,
    /*925*/ 0.0,
    /*926*/ 0.0,
    /*927*/ 0.0,
    /*928*/ 0.0,
    /*929*/ 0.0,
    /*930*/ 0.0,
    /*931*/ 0.0,
    /*932*/ 0.0,
    /*933*/ 0.0,
    /*934*/ 0.0,
    /*935*/ 0.0,
    /*936*/ 0.0,
    /*937*/ 0.0,
    /*938*/ 0.0,
    /*939*/ 0.0,
    /*940*/ 0.0,
    /*941*/ 0.0,
    /*942*/ 0.0,
    /*943*/ 0.0,
    /*944*/ 0.0,
    /*945*/ 0.0,
    /*946*/ 2.631205051777122,
    /*947*/ 0.06049146858800099,
    /*948*/ 0.001391435970220645,
    /*949*/ 3.203999074612218e-05,
    /*950*/ 7.389472842063599e-07,
    /*951*/ 1.707892514789033e-08,
    /*952*/ 0.0,
    /*953*/ 0.0,
    /*954*/ 0.0,
    /*955*/ 0.0,
    /*956*/ 0.0,
    /*957*/ 0.0,
    /*958*/ 0.0,
    /*959*/ 0.0,
    /*960*/ 0.0,
    /*961*/ 0.0,
    /*962*/ 0.0,
    /*963*/ 0.0,
    /*964*/ 0.0,
    /*965*/ 0.0,
    /*966*/ 0.0,
    /*967*/ 0.0,
    /*968*/ 0.0,
    /*969*/ 0.0,
    /*970*/ 0.0,
    /*971*/ 0.0,
    /*972*/ 0.0,
    /*973*/ 0.0,
    /*974*/ 0.0,
    /*975*/ 0.0,
    /*976*/ 0.0,
    /*977*/ 0.0,
    /*978*/ 0.0,
    /*979*/ 0.0,
    /*980*/ 0.0,
    /*981*/ 0.0,
    /*982*/ 0.0,
    /*983*/ 0.0,
    /*984*/ 0.0,
    /*985*/ 0.0,
    /*986*/ 0.0,
    /*987*/ 0.0,
    /*988*/ 0.0,
    /*989*/ 0.0,
    /*990*/ 2.661276943046203,
    /*991*/ 0.05980775163261159,
    /*992*/ 0.001344758606772777,
    /*993*/ 3.026709628913576e-05,
    /*994*/ 6.82273041336726e-07,
    /*995*/ 1.541097711967333e-08,
    /*996*/ 0.0,
    /*997*/ 0.0,
    /*998*/ 0.0,
    /*999*/ 0.0,
    /*1000*/ 0.0,
    /*1001*/ 0.0,
    /*1002*/ 0.0,
    /*1003*/ 0.0,
    /*1004*/ 0.0,
    /*1005*/ 0.0,
    /*1006*/ 0.0,
    /*1007*/ 0.0,
    /*1008*/ 0.0,
    /*1009*/ 0.0,
    /*1010*/ 0.0,
    /*1011*/ 0.0,
    /*1012*/ 0.0,
    /*1013*/ 0.0,
    /*1014*/ 0.0,
    /*1015*/ 0.0,
    /*1016*/ 0.0,
    /*1017*/ 0.0,
    /*1018*/ 0.0,
    /*1019*/ 0.0,
    /*1020*/ 0.0,
    /*1021*/ 0.0,
    /*1022*/ 0.0,
    /*1023*/ 0.0,
    /*1024*/ 0.0,
    /*1025*/ 0.0,
    /*1026*/ 0.0,
    /*1027*/ 0.0,
    /*1028*/ 0.0,
    /*1029*/ 0.0,
    /*1030*/ 0.0,
    /*1031*/ 0.0,
    /*1032*/ 0.0,
    /*1033*/ 0.0,
    /*1034*/ 0.0,
    /*1035*/ 2.691012803886529,
    /*1036*/ 0.05914670988469412,
    /*1037*/ 0.0013006346632196,
    /*1038*/ 2.862862420075548e-05,
    /*1039*/ 6.310703741403411e-07,
    /*1040*/ 1.393801289538844e-08,
    /*1041*/ 0.0,
    /*1042*/ 0.0,
    /*1043*/ 0.0,
    /*1044*/ 0.0,
    /*1045*/ 0.0,
    /*1046*/ 0.0,
    /*1047*/ 0.0,
    /*1048*/ 0.0,
    /*1049*/ 0.0,
    /*1050*/ 0.0,
    /*1051*/ 0.0,
    /*1052*/ 0.0,
    /*1053*/ 0.0,
    /*1054*/ 0.0,
    /*1055*/ 0.0,
    /*1056*/ 0.0,
    /*1057*/ 0.0,
    /*1058*/ 0.0,
    /*1059*/ 0.0,
    /*1060*/ 0.0,
    /*1061*/ 0.0,
    /*1062*/ 0.0,
    /*1063*/ 0.0,
    /*1064*/ 0.0,
    /*1065*/ 0.0,
    /*1066*/ 0.0,
    /*1067*/ 0.0,
    /*1068*/ 0.0,
    /*1069*/ 0.0,
    /*1070*/ 0.0,
    /*1071*/ 0.0,
    /*1072*/ 0.0,
    /*1073*/ 0.0,
    /*1074*/ 0.0,
    /*1075*/ 0.0,
    /*1076*/ 0.0,
    /*1077*/ 0.0,
    /*1078*/ 0.0,
    /*1079*/ 0.0,
    /*1080*/ 0.0,
    /*1081*/ 2.720423653362309,
    /*1082*/ 0.05850711688397001,
    /*1083*/ 0.001258872718479037,
    /*1084*/ 2.711174328577707e-05,
    /*1085*/ 5.847068929770086e-07,
    /*1086*/ 1.263363950714379e-08,
    /*1087*/ 0.0,
    /*1088*/ 0.0,
    /*1089*/ 0.0,
    /*1090*/ 0.0,
    /*1091*/ 0.0,
    /*1092*/ 0.0,
    /*1093*/ 0.0,
    /*1094*/ 0.0,
    /*1095*/ 0.0,
    /*1096*/ 0.0,
    /*1097*/ 0.0,
    /*1098*/ 0.0,
    /*1099*/ 0.0,
    /*1100*/ 0.0,
    /*1101*/ 0.0,
    /*1102*/ 0.0,
    /*1103*/ 0.0,
    /*1104*/ 0.0,
    /*1105*/ 0.0,
    /*1106*/ 0.0,
    /*1107*/ 0.0,
    /*1108*/ 0.0,
    /*1109*/ 0.0,
    /*1110*/ 0.0,
    /*1111*/ 0.0,
    /*1112*/ 0.0,
    /*1113*/ 0.0,
    /*1114*/ 0.0,
    /*1115*/ 0.0,
    /*1116*/ 0.0,
    /*1117*/ 0.0,
    /*1118*/ 0.0,
    /*1119*/ 0.0,
    /*1120*/ 0.0,
    /*1121*/ 0.0,
    /*1122*/ 0.0,
    /*1123*/ 0.0,
    /*1124*/ 0.0,
    /*1125*/ 0.0,
    /*1126*/ 0.0,
    /*1127*/ 0.0,
    /*1128*/ 2.749519921161698,
    /*1129*/ 0.05788783709042469,
    /*1130*/ 0.001219299419741175,
    /*1131*/ 2.570508877402524e-05,
    /*1132*/ 5.426348493370343e-07,
    /*1133*/ 1.147550435625091e-08,
    /*1134*/ 0.0,
    /*1135*/ 0.0,
    /*1136*/ 0.0,
    /*1137*/ 0.0,
    /*1138*/ 0.0,
    /*1139*/ 0.0,
    /*1140*/ 0.0,
    /*1141*/ 0.0,
    /*1142*/ 0.0,
    /*1143*/ 0.0,
    /*1144*/ 0.0,
    /*1145*/ 0.0,
    /*1146*/ 0.0,
    /*1147*/ 0.0,
    /*1148*/ 0.0,
    /*1149*/ 0.0,
    /*1150*/ 0.0,
    /*1151*/ 0.0,
    /*1152*/ 0.0,
    /*1153*/ 0.0,
    /*1154*/ 0.0,
    /*1155*/ 0.0,
    /*1156*/ 0.0,
    /*1157*/ 0.0,
    /*1158*/ 0.0,
    /*1159*/ 0.0,
    /*1160*/ 0.0,
    /*1161*/ 0.0,
    /*1162*/ 0.0,
    /*1163*/ 0.0,
    /*1164*/ 0.0,
    /*1165*/ 0.0,
    /*1166*/ 0.0,
    /*1167*/ 0.0,
    /*1168*/ 0.0,
    /*1169*/ 0.0,
    /*1170*/ 0.0,
    /*1171*/ 0.0,
    /*1172*/ 0.0,
    /*1173*/ 0.0,
    /*1174*/ 0.0,
    /*1175*/ 0.0,
    /*1176*/ 2.778311490808207,
    /*1177*/ 0.05728781739681247,
    /*1178*/ 0.00118175744029733,
    /*1179*/ 2.43985682194388e-05,
    /*1180*/ 5.043783222424648e-07,
    /*1181*/ 1.044460787186219e-08,
    /*1182*/ 0.0,
    /*1183*/ 0.0,
    /*1184*/ 0.0,
    /*1185*/ 0.0,
    /*1186*/ 0.0,
    /*1187*/ 0.0,
    /*1188*/ 0.0,
    /*1189*/ 0.0,
    /*1190*/ 0.0,
    /*1191*/ 0.0,
    /*1192*/ 0.0,
    /*1193*/ 0.0,
    /*1194*/ 0.0,
    /*1195*/ 0.0,
    /*1196*/ 0.0,
    /*1197*/ 0.0,
    /*1198*/ 0.0,
    /*1199*/ 0.0,
    /*1200*/ 0.0,
    /*1201*/ 0.0,
    /*1202*/ 0.0,
    /*1203*/ 0.0,
    /*1204*/ 0.0,
    /*1205*/ 0.0,
    /*1206*/ 0.0,
    /*1207*/ 0.0,
    /*1208*/ 0.0,
    /*1209*/ 0.0,
    /*1210*/ 0.0,
    /*1211*/ 0.0,
    /*1212*/ 0.0,
    /*1213*/ 0.0,
    /*1214*/ 0.0,
    /*1215*/ 0.0,
    /*1216*/ 0.0,
    /*1217*/ 0.0,
    /*1218*/ 0.0,
    /*1219*/ 0.0,
    /*1220*/ 0.0,
    /*1221*/ 0.0,
    /*1222*/ 0.0,
    /*1223*/ 0.0,
    /*1224*/ 0.0,
    /*1225*/ 2.806807738882166,
    /*1226*/ 0.05670607959001315,
    /*1227*/ 0.00114610370472699,
    /*1228*/ 2.318319646198824e-05,
    /*1229*/ 4.695225605470426e-07,
    /*1230*/ 9.524744358118536e-09,
    /*1231*/ 0.0,
    /*1232*/ 0.0,
    /*1233*/ 0.0,
    /*1234*/ 0.0,
    /*1235*/ 0.0,
    /*1236*/ 0.0,
    /*1237*/ 0.0,
    /*1238*/ 0.0,
    /*1239*/ 0.0,
    /*1240*/ 0.0,
    /*1241*/ 0.0,
    /*1242*/ 0.0,
    /*1243*/ 0.0,
    /*1244*/ 0.0,
    /*1245*/ 0.0,
    /*1246*/ 0.0,
    /*1247*/ 0.0,
    /*1248*/ 0.0,
    /*1249*/ 0.0,
    /*1250*/ 0.0,
    /*1251*/ 0.0,
    /*1252*/ 0.0,
    /*1253*/ 0.0,
    /*1254*/ 0.0,
    /*1255*/ 0.0,
    /*1256*/ 0.0,
    /*1257*/ 0.0,
    /*1258*/ 0.0,
    /*1259*/ 0.0,
    /*1260*/ 0.0,
    /*1261*/ 0.0,
    /*1262*/ 0.0,
    /*1263*/ 0.0,
    /*1264*/ 0.0,
    /*1265*/ 0.0,
    /*1266*/ 0.0,
    /*1267*/ 0.0,
    /*1268*/ 0.0,
    /*1269*/ 0.0,
    /*1270*/ 0.0,
    /*1271*/ 0.0,
    /*1272*/ 0.0,
    /*1273*/ 0.0,
    /*1274*/ 0.0,
    /*1275*/ 2.835017570693472,
    /*1276*/ 0.05614171363835682,
    /*1277*/ 0.00111220784184347,
    /*1278*/ 2.205095481555296e-05,
    /*1279*/ 4.377050834318466e-07,
    /*1280*/ 8.702045102005835e-09,
    /*1281*/ 0.0,
    /*1282*/ 0.0,
    /*1283*/ 0.0,
    /*1284*/ 0.0,
    /*1285*/ 0.0,
    /*1286*/ 0.0,
    /*1287*/ 0.0,
    /*1288*/ 0.0,
    /*1289*/ 0.0,
    /*1290*/ 0.0,
    /*1291*/ 0.0,
    /*1292*/ 0.0,
    /*1293*/ 0.0,
    /*1294*/ 0.0,
    /*1295*/ 0.0,
    /*1296*/ 0.0,
    /*1297*/ 0.0,
    /*1298*/ 0.0,
    /*1299*/ 0.0,
    /*1300*/ 0.0,
    /*1301*/ 0.0,
    /*1302*/ 0.0,
    /*1303*/ 0.0,
    /*1304*/ 0.0,
    /*1305*/ 0.0,
    /*1306*/ 0.0,
    /*1307*/ 0.0,
    /*1308*/ 0.0,
    /*1309*/ 0.0,
    /*1310*/ 0.0,
    /*1311*/ 0.0,
    /*1312*/ 0.0,
    /*1313*/ 0.0,
    /*1314*/ 0.0,
    /*1315*/ 0.0,
    /*1316*/ 0.0,
    /*1317*/ 0.0,
    /*1318*/ 0.0,
    /*1319*/ 0.0,
    /*1320*/ 0.0,
    /*1321*/ 0.0,
    /*1322*/ 0.0,
    /*1323*/ 0.0,
    /*1324*/ 0.0,
    /*1325*/ 0.0};
// The number of points in the radial integration grid
constexpr int rsize = 100;
constexpr std::array<double, rsize> ws = {

    /*0*/ 7.34634490505672E-4,
    /*1*/ 0.001709392653518105,
    /*2*/ 0.002683925371553482,
    /*3*/ 0.003655961201326375,
    /*4*/ 0.00462445006342212,
    /*5*/ 0.00558842800386552,
    /*6*/ 0.00654694845084532,
    /*7*/ 0.007499073255464712,
    /*8*/ 0.008443871469668971,
    /*9*/ 0.00938041965369446,
    /*10*/ 0.01030780257486897,
    /*11*/ 0.01122511402318598,
    /*12*/ 0.012131457662979497,
    /*13*/ 0.0130259478929715423,
    /*14*/ 0.0139077107037187727,
    /*15*/ 0.014775884527441302,
    /*16*/ 0.015629621077546003,
    /*17*/ 0.01646808617614521,
    /*18*/ 0.017290460568323582,
    /*19*/ 0.018095940722128117,
    /*20*/ 0.018883739613374905,
    /*21*/ 0.019653087494435306,
    /*22*/ 0.020403232646209433,
    /*23*/ 0.021133442112527642,
    /*24*/ 0.02184300241624739,
    /*25*/ 0.022531220256336273,
    /*26*/ 0.023197423185254122,
    /*27*/ 0.023840960265968206,
    /*28*/ 0.02446120270795705,
    /*29*/ 0.02505754448157959,
    /*30*/ 0.02562940291020812,
    /*31*/ 0.02617621923954568,
    /*32*/ 0.026697459183570963,
    /*33*/ 0.02719261344657688,
    /*34*/ 0.027661198220792388,
    /*35*/ 0.028102755659101173,
    /*36*/ 0.028516854322395098,
    /*37*/ 0.028903089601125203,
    /*38*/ 0.029261084110638277,
    /*39*/ 0.02959048805991264,
    /*40*/ 0.029890979593332831,
    /*41*/ 0.03016226510516914,
    /*42*/ 0.03040407952645482,
    /*43*/ 0.03061618658398045,
    /*44*/ 0.03079837903115259,
    /*45*/ 0.030950478850490988,
    /*46*/ 0.031072337427566517,
    /*47*/ 0.031163835696209907,
    /*48*/ 0.03122488425484936,
    /*49*/ 0.03125542345386336,
    /*50*/ 0.031255423453863357,
    /*51*/ 0.03122488425484936,
    /*52*/ 0.0311638356962099068,
    /*53*/ 0.031072337427566517,
    /*54*/ 0.030950478850490988,
    /*55*/ 0.03079837903115259,
    /*56*/ 0.030616186583980449,
    /*57*/ 0.03040407952645482,
    /*58*/ 0.0301622651051691449,
    /*59*/ 0.02989097959333283,
    /*60*/ 0.029590488059912643,
    /*61*/ 0.029261084110638277,
    /*62*/ 0.028903089601125203,
    /*63*/ 0.0285168543223951,
    /*64*/ 0.02810275565910117,
    /*65*/ 0.02766119822079239,
    /*66*/ 0.02719261344657688,
    /*67*/ 0.02669745918357096,
    /*68*/ 0.02617621923954568,
    /*69*/ 0.025629402910208116,
    /*70*/ 0.02505754448157959,
    /*71*/ 0.024461202707957053,
    /*72*/ 0.02384096026596821,
    /*73*/ 0.023197423185254122,
    /*74*/ 0.0225312202563362727,
    /*75*/ 0.021843002416247386,
    /*76*/ 0.02113344211252764,
    /*77*/ 0.020403232646209433,
    /*78*/ 0.019653087494435306,
    /*79*/ 0.0188837396133749046,
    /*80*/ 0.018095940722128117,
    /*81*/ 0.017290460568323582,
    /*82*/ 0.016468086176145213,
    /*83*/ 0.015629621077546003,
    /*84*/ 0.0147758845274413,
    /*85*/ 0.013907710703718773,
    /*86*/ 0.01302594789297154,
    /*87*/ 0.0121314576629795,
    /*88*/ 0.01122511402318598,
    /*89*/ 0.01030780257486897,
    /*90*/ 0.00938041965369446,
    /*91*/ 0.008443871469668971,
    /*92*/ 0.007499073255464712,
    /*93*/ 0.00654694845084532,
    /*94*/ 0.005588428003865515,
    /*95*/ 0.00462445006342212,
    /*96*/ 0.003655961201326375,
    /*97*/ 0.002683925371553482,
    /*98*/ 0.001709392653518105,
    /*99*/ 7.3463449050567E-4};

} // namespace SOAPconstants

// const double *factorListSet() { return SOAPconstants::factorList.data(); }

// const double *getws() { return SOAPconstants::ws.data(); }

inline double factorY(int l, int m) {
  return SOAPconstants::factorList[(l * (l + 1)) / 2 + m]; // l+1
}
/*
inline double *getoOr(const double *r, const int rsize) {
  double *oOr = new double[rsize];
  for (int w = 0; w < rsize; ++w) {
    oOr[w] = 1.0 / r[w];
  }
  return oOr;
}
*/
inline double *getrw2(const double *r, const int rsize) {
  double *rw2 = new double[rsize];
  for (int w = 0; w < rsize; ++w) {
    rw2[w] = r[w] * r[w];
  }
  return rw2;
}

inline void expMs(double *rExpDiff, const double eta, const double *r,
                  const double *ri, const int isize, const int rsize) {
  double rDiff;
  for (int i = 0; i < isize; ++i) {
    for (int w = 0; w < rsize; ++w) {
      rDiff = r[w] - ri[i];
      if (rDiff > 5.0) {
        rExpDiff[rsize * i + w] = 0.0;
      } else {
        rExpDiff[rsize * i + w] = exp(-eta * rDiff * rDiff);
      }
    }
  }
}

inline void expPs(double *rExpSum, const double eta, const double *r,
                  const double *ri, const int isize, const int rsize) {
  double rSum = 0.0;
  for (int i = 0; i < isize; ++i) {
    for (int w = 0; w < rsize; ++w) {
      rSum = r[w] + ri[i];
      if (rSum > 5.0) {
        rExpSum[rsize * i + w] = 0.0;
      } else {
        rExpSum[rsize * i + w] = exp(-eta * rSum * rSum);
      }
    }
  }
}
/*
struct NeighboursAndCenters {
  int iNeighbour{0};
  int iCenter{0};
};
*/
pair<int, int> getDeltas(double *dx, double *dy, double *dz, double *ri,
                         const double *rw, double /*rCut*/, double *oOri,
                         double *oO4arri, double *minExp, double *pluExp,
                         double eta, const py::array_t<double> &positions,
                         const double ix, const double iy, const double iz,
                         const vector<int> &indices, const int rsize,
                         const int Ihpos, const int Itype) {
  int iNeighbour = 0;
  int iCenter = 0;
  const int nNeighbours = indices.size();
  double *oO4ari = new double[nNeighbours];
  {
    double Xi;
    double Yi;
    double Zi;
    double ri2;
    const double oneOnEta = 1.0 / eta;
    auto pos = positions.unchecked<2>();
    for (const int &i : indices) {
      Xi = pos(i, 0) - ix;
      Yi = pos(i, 1) - iy;
      Zi = pos(i, 2) - iz;
      ri2 = Xi * Xi + Yi * Yi + Zi * Zi;

      // When an atom is very close to the center (=approximately on top of
      // it), we do not add it to the calculations, as the numerical
      // integration cannot handle these cases. Instead, we gather the number
      // of such centered atoms and report them back for later correction.
      if (ri2 <= 1e-12) {
        iCenter++;
      } else {
        ri[iNeighbour] = sqrt(ri2);
        dx[iNeighbour] = Xi;
        dy[iNeighbour] = Yi;
        dz[iNeighbour] = Zi;
        oOri[iNeighbour] = 1.0 / ri[iNeighbour];
        oO4ari[iNeighbour] = 0.25 * oneOnEta * oOri[iNeighbour];
        iNeighbour++;
      }
    }
  }
  // If there is at least one atom at the center, we add a zero element to
  // the end of ris so that the weights can be calculated. This way they do
  // not interfere with the calculations for non-centered atoms.
  if (iCenter > 0) {
    ri[iNeighbour] = 0.0;
  }

  // double *oOr = getoOr(rw, rsize);
  for (int i = 0; i < iNeighbour; ++i) {
    for (int w = 0; w < rsize; ++w) {
      oO4arri[rsize * i + w] = oO4ari[i] / rw[w];
    }
  }
  // delete[] oOr;
  expMs(minExp, eta, rw, ri, iNeighbour, rsize);
  expPs(pluExp, eta, rw, ri, iNeighbour, rsize);
  delete[] oO4ari;
  return make_pair(iNeighbour, iCenter);
}

double *getFlir(const double *oO4arri, const double * /*ri*/,
                const double *minExp, const double *pluExp, const int icount,
                const int rsize, const int lMax) {
  double *Flir = new double[(lMax + 1) * icount * rsize];
  // l=0
  for (int i = 0; i < icount; ++i) {
    for (int w = 0; w < rsize; ++w) {
      Flir[rsize * i + w] = oO4arri[rsize * i + w] *
                            (minExp[rsize * i + w] - pluExp[rsize * i + w]);
    }
  }
  // l=1
  if (lMax > 0) {
    for (int i = 0; i < icount; ++i) {
      for (int w = 0; w < rsize; ++w) {
        Flir[rsize * icount + rsize * i + w] =
            oO4arri[rsize * i + w] *
            (minExp[rsize * i + w] + pluExp[rsize * i + w] -
             2 * Flir[rsize * i + w]);
      }
    }
  }
  // l>1
  if (lMax > 1) {
    for (int l = 2; l < lMax + 1; ++l) {
      for (int i = 0; i < icount; ++i) {
        for (int w = 0; w < rsize; ++w) {
          Flir[l * rsize * icount + rsize * i + w] =
              Flir[(l - 2) * rsize * icount + rsize * i + w] -
              oO4arri[rsize * i + w] * (4 * l - 2) *
                  Flir[(l - 1) * rsize * icount + rsize * i + w];
          // Very Important!!!
          if (Flir[l * rsize * icount + rsize * i + w] < 0) {
            Flir[l * rsize * icount + rsize * i + w] = 0.0;
          }
        }
      }
    }
  }

  return Flir;
}

double legendre_poly(const int l, const int m, const double x) {
  double pmm = 1.0;
  if (m < 0 || m > l || fabs(x) > 1.0) {
    printf("ERROR: Bad arguments in routine legendre_poly");
    exit(1);
  }
  if (m > 0) {
    double somx2 = sqrt((1.0 - x) * (1.0 + x));

    // double fact = -1.0;

    for (int i = 0; i < m; ++i) {
      pmm *= -(1.0 + m * 2.0) * somx2;
      // pmm *= fact * somx2;
      // fact -= 2.0;
    }
  }

  if (l == m) {
    return pmm;
  }
  if (l == (m + 1)) {
    return x * (2 * m + 1) * pmm;
  }

  double pmmp1 = x * (2 * m + 1) * pmm;
  double pll = pmmp1;
  for (int ll = m + 2; ll <= l; ++ll) {
    pll = (x * (2 * ll - 1) * pmmp1 - (ll + m - 1) * pmm) / double(ll - m);
    pmm = pmmp1;
    pmmp1 = pll;
  }
  return pll;
}

double *getYlmi(const double *x, const double *y, const double *z,
                const double *oOri, const int icount, const int lMax) {
  double *Ylmi = new double[2 * (lMax + 1) * (lMax + 1) * icount];

  double *legPol = new double[(lMax + 1) * (lMax + 1) * icount];
  double *ChiCos = new double[(lMax + 1) * icount];
  double *ChiSin = new double[(lMax + 1) * icount];
  double myAtan2;

  for (int i = 0; i < icount; ++i) {
    for (int l = 0; l < lMax + 1; ++l) {
      for (int m = 0; m < l + 1; ++m) {
        legPol[icount * (lMax + 1) * l + icount * m + i] =
            legendre_poly(l, m, z[i] * oOri[i]);
      }
    }
    for (int m = 0; m < lMax + 1; ++m) {
      myAtan2 = m * atan2(y[i], x[i]);
      ChiCos[m * icount + i] = cos(myAtan2);
      ChiSin[m * icount + i] = sin(myAtan2);
    }
  }

  for (int l = 0; l < lMax + 1; ++l) {
    for (int m = 0; m < l + 1; ++m) {
      for (int i = 0; i < icount; ++i) {
        Ylmi[2 * (lMax + 1) * icount * l + 2 * icount * m + 2 * i] =
            factorY(l, m) * legPol[icount * (lMax + 1) * l + icount * m + i] *
            ChiCos[m * icount + i];
        Ylmi[2 * (lMax + 1) * icount * l + 2 * icount * m + 2 * i + 1] =
            factorY(l, m) * legPol[icount * (lMax + 1) * l + icount * m + i] *
            ChiSin[m * icount + i];
      }
    }
  }
  delete[] legPol;
  delete[] ChiCos;
  delete[] ChiSin;

  return Ylmi;
}

double *getIntegrand(const double *Flir, const double *Ylmi, int rsize,
                     int icount, int lMax, const double *weights) {
  // double *summed = (double *)malloc(2 * sd * (lMax + 1) * rsize *(lMax+1));
  double *summed = new double[2 * (lMax + 1) * rsize * (lMax + 1)];
  double realY;
  double imagY;

  // Initialize to zero
  memset(summed, 0.0, 2 * (lMax + 1) * rsize * (lMax + 1) * sizeof(double));

  for (int l = 0; l < lMax + 1; ++l) {
    for (int m = 0; m < l + 1; ++m) {
      for (int i = 0; i < icount; ++i) {
        realY = Ylmi[2 * (lMax + 1) * icount * l + 2 * icount * m + 2 * i];
        imagY = Ylmi[2 * (lMax + 1) * icount * l + 2 * icount * m + 2 * i + 1];
        for (int rw = 0; rw < rsize; ++rw) {
          summed[2 * (lMax + 1) * l * rsize + 2 * m * rsize + 2 * rw] +=
              weights[i] * Flir[l * rsize * icount + rsize * i + rw] * realY;
          summed[2 * (lMax + 1) * l * rsize + 2 * m * rsize + 2 * rw + 1] +=
              weights[i] * Flir[l * rsize * icount + rsize * i + rw] * imagY;
        }
      }
    }
  }
  return summed;
}

void getC(double *C, double *rw2, double *gns, double *summed, double /*rCut*/,
          int lMax, int rsize, int gnsize, int nCenters, int nNeighbours,
          double eta, const double *weights) {
  // Initialize to zero
  memset(C, 0.0, 2 * (lMax + 1) * (lMax + 1) * gnsize * sizeof(double));

  for (int n = 0; n < gnsize; ++n) {
    // For atoms at the center we add a precalculated constant value
    // because the numerical integration cannot handle them
    if (nCenters > 0) {
      double weight = weights[nNeighbours];
      for (int iCenter = 0; iCenter < nCenters; ++iCenter) {
        for (int rw = 0; rw < rsize; ++rw) {
          C[2 * (lMax + 1) * (lMax + 1) * n] +=
              weight * 0.5 * 0.564189583547756 * rw2[rw] *
              SOAPconstants::ws[rw] * gns[rsize * n + rw] * exp(-eta * rw2[rw]);
        }
      }
    }
    for (int l = 0; l < lMax + 1; ++l) {
      for (int m = 0; m < l + 1; ++m) {
        for (int rw = 0; rw < rsize; ++rw) {
          C[2 * (lMax + 1) * (lMax + 1) * n + l * 2 * (lMax + 1) + 2 * m] +=
              rw2[rw] * SOAPconstants::ws[rw] * gns[rsize * n + rw] *
              summed[2 * (lMax + 1) * l * rsize + 2 * m * rsize + 2 * rw]; // Re
          C[2 * (lMax + 1) * (lMax + 1) * n + l * 2 * (lMax + 1) + 2 * m + 1] +=
              rw2[rw] * SOAPconstants::ws[rw] * gns[rsize * n + rw] *
              summed[2 * (lMax + 1) * l * rsize + 2 * m * rsize + 2 * rw +
                     1]; // Im
        }
      }
    }
  }
}

void accumC(double *Cs, const double *C, const int lMax, const int nMax,
            const int typeI, const int i, const int nCoeffs) {
  const int lMaxp1 = lMax + 1;
  const int typeAddr = 2 * typeI * lMaxp1 * lMaxp1 * nMax;
  for (int n = 0; n < nMax; ++n) {
    const int nAddr = 2 * lMaxp1 * lMaxp1 * n;
    for (int l = 0; l < lMax + 1; ++l) {
      for (int m = 0; m < l + 1; ++m) {
        Cs[i * nCoeffs + typeAddr + nAddr + l * 2 * lMaxp1 + 2 * m] =
            C[nAddr + l * 2 * lMaxp1 + 2 * m];
        Cs[i * nCoeffs + typeAddr + nAddr + l * 2 * lMaxp1 + 2 * m + 1] =
            C[nAddr + l * 2 * lMaxp1 + 2 * m + 1];
      }
    }
  }
}

/**
 * Used to calculate the partial power spectrum.
 *
 * The power spectrum is multiplied by an l-dependent prefactor
 * PI*sqrt(8.0/(2.0*l+1.0)); that comes from the normalization of the Wigner D
 * matrices. This prefactor is mentioned in the errata of the original SOAP
 * paper: On representing chemical environments, Phys. Rev. B 87, 184115
 * (2013). Here the square root of the prefactor in the dot-product kernel is
 * used, so that after a possible dot-product the full prefactor is recovered.
 */
void getP(py::detail::unchecked_mutable_reference<double, 2> &Ps,
          const double *Cs, const int Nt, const int lMax, const int nMax,
          const int Hs, const double rCut2, const int /*nFeatures*/,
          const bool crossover, const int nCoeffs) {
  // The current index in the final power spectrum array.
  int pIdx = 0;
  const int lMaxp1 = lMax + 1;
  for (int i = 0; i < Hs; ++i) {
    pIdx = 0;
    for (int Z1 = 0; Z1 < Nt; Z1++) {
      int Z2Limit = crossover ? Nt : Z1 + 1;
      int addrZ1 = 2 * Z1 * lMaxp1 * lMaxp1 * nMax;
      for (int Z2 = Z1; Z2 < Z2Limit; Z2++) {
        // If the species are identical, then there is symmetry in the
        // radial basis and we only loop N2 from N1 to nMax
        int addrZ2 = 2 * Z2 * lMaxp1 * lMaxp1 * nMax;
        for (int l = 0; l < lMax + 1; ++l) {
          const double normalizationConst =
              PI * sqrt(8.0 / (2.0 * l + 1.0)) * 39.478417604 * rCut2;
          const int twoLlMaxp1 = l * 2 * lMaxp1;
          for (int N1 = 0; N1 < nMax; N1++) {
            const int addrN1 = 2 * lMaxp1 * lMaxp1 * N1;
            // the initialization of N2 is the only difference in the two cases
            // so if I use i can avoid a lot of code repetition,
            // for speed purpuses one can think to substitute "((Z1==Z2)? N1:0)"
            // with the branchless version "((Z1==Z2)*N1)"
            for (int N2 = ((Z1 == Z2) ? N1 : 0); N2 < nMax; N2++) {
              const int addrN2 = 2 * lMaxp1 * lMaxp1 * N2;
              double sum =
                  Cs[i * nCoeffs + addrZ1 + addrN1 + twoLlMaxp1]    // m=0
                  * Cs[i * nCoeffs + addrZ2 + addrN2 + twoLlMaxp1]; // m=0
              for (int m = 1; m < l + 1; ++m) {
                sum += 2 *
                       (Cs[i * nCoeffs + addrZ1 + addrN1 + twoLlMaxp1 + 2 * m] *
                            Cs[i * nCoeffs + addrZ2 + addrN2 + twoLlMaxp1 +
                               2 * m] +
                        Cs[i * nCoeffs + addrZ1 + addrN1 + twoLlMaxp1 + 2 * m +
                           1] *
                            Cs[i * nCoeffs + addrZ2 + addrN2 + twoLlMaxp1 +
                               2 * m + 1]);
              }
              // Applying normalization and other constants
              Ps(i, pIdx) = normalizationConst * sum;
              ++pIdx;
            }
          }
        }
      }

      /*
      //this is the original version
      if (Z1 == Z2) {
        for (int l = 0; l < lMaxp1; ++l) {
          const double normalizationConst =
              PI * sqrt(8.0 / (2.0 * l + 1.0)) * 39.478417604 * rCut2;
          const int twoLlMaxp1 = l * 2 * lMaxp1;
          for (int N1 = 0; N1 < nMax; N1++) {
            const int addrN1 = 2 * lMaxp1 * lMaxp1 * N1;
            for (int N2 = N1; N2 < nMax; N2++) {
              const int addrN2 = 2 * lMaxp1 * lMaxp1 * N2;
              double sum =
                  Cs[i * nCoeffs + addrZ1 + addrN1 + twoLlMaxp1]    // m=0
                  * Cs[i * nCoeffs + addrZ2 + addrN2 + twoLlMaxp1]; // m=0
              for (int m = 1; m < l + 1; ++m) {
                sum +=
                    2 *
                    (Cs[i * nCoeffs + addrZ1 + addrN1 + twoLlMaxp1 + 2 * m] *
                         Cs[i * nCoeffs + addrZ2 + addrN2 + twoLlMaxp1 +
                            2 * m] +
                     Cs[i * nCoeffs + addrZ1 + addrN1 + twoLlMaxp1 + 2 * m +
                        1] *
                         Cs[i * nCoeffs + addrZ2 + addrN2 + twoLlMaxp1 +
                            2 * m + 1]);
              }
              // Applying normalization and other constants
              Ps(i, pIdx) = normalizationConst * sum;
              ++pIdx;
            }
          }
        }
        // If the species are different, then there is no symmetry in the
        // radial basis and we have to loop over all pairwise combinations.
      } else {
        for (int l = 0; l < lMax + 1; ++l) {
          const double normalizationConst =
              PI * sqrt(8.0 / (2.0 * l + 1.0)) * 39.478417604 * rCut2;
          const int twoLlMaxp1 = l * 2 * lMaxp1;
          for (int N1 = 0; N1 < nMax; N1++) {
            const int addrN1 = 2 * lMaxp1 * lMaxp1 * N1;
            for (int N2 = 0; N2 < nMax; N2++) {
              const int addrN2 = 2 * lMaxp1 * lMaxp1 * N2;
              double sum =
                  Cs[i * nCoeffs + addrZ1 + addrN1 + twoLlMaxp1]    // m=0
                  * Cs[i * nCoeffs + addrZ2 + addrN2 + twoLlMaxp1]; // m=0
              for (int m = 1; m < l + 1; ++m) {
                sum +=
                    2 *
                    (Cs[i * nCoeffs + addrZ1 + addrN1 + twoLlMaxp1 + 2 * m] *
                         Cs[i * nCoeffs + addrZ2 + addrN2 + twoLlMaxp1 +
                            2 * m] +
                     Cs[i * nCoeffs + addrZ1 + addrN1 + twoLlMaxp1 + 2 * m +
                        1] *
                         Cs[i * nCoeffs + addrZ2 + addrN2 + twoLlMaxp1 +
                            2 * m + 1]);
              }
              // Applying normalization and other constants
              Ps(i, pIdx) = normalizationConst * sum;
              ++pIdx;
            }
          }
        }
      }
    }*/
    }
  }
}

void soapGeneral(py::array_t<double> PsArr, py::array_t<double> positions,
                 py::array_t<double> HposArr, py::array_t<int> atomicNumbersArr,
                 py::array_t<int> orderedSpeciesArr, const double rCut,
                 const double /*cutoffPadding*/, const int nMax, const int lMax,
                 const double eta, py::dict weighting,
                 py::array_t<double> rwArr, py::array_t<double> gssArr,
                 const bool crossover, string average, CellList cellList) {
  const int nAtoms = static_cast<const int>(atomicNumbersArr.shape(0));
  const int Nt = static_cast<const int>(orderedSpeciesArr.shape(0));
  const int Hs = static_cast<const int>(HposArr.shape(0));
  const int nFeatures = crossover
                            ? (Nt * nMax) * (Nt * nMax + 1) / 2 * (lMax + 1)
                            : Nt * (lMax + 1) * ((nMax + 1) * nMax) / 2;
  auto atomicNumbers = atomicNumbersArr.unchecked<1>();
  auto species = orderedSpeciesArr.unchecked<1>();
  auto Ps = PsArr.mutable_unchecked<2>();
  double *Hpos = (double *)HposArr.request().ptr;
  double *rw = (double *)rwArr.request().ptr;
  double *gss = (double *)gssArr.request().ptr;

  constexpr int rsize = 100;
  const double rCut2 = rCut * rCut;
  // Initialize arrays for storing the C coefficients.
  const int nCoeffs = 2 * (lMax + 1) * (lMax + 1) * nMax * Nt;
  const int nCoeffsAll = nCoeffs * Hs;
  // Create a mapping between an atomic index and its internal index in the
  // output. The list of species is already ordered.
  map<int, int> ZIndexMap;
  for (int i = 0; i < species.size(); ++i) {
    ZIndexMap[species(i)] = i;
  }
  double *Cs = new double[nCoeffsAll];
  memset(Cs, 0.0, nCoeffsAll * sizeof(double));
  {
    double *dx = new double[nAtoms];
    double *dy = new double[nAtoms];
    double *dz = new double[nAtoms];
    double *minExp = new double[nAtoms * rsize];
    double *pluExp = new double[nAtoms * rsize];
    double *ris = new double[nAtoms];
    double *weights = new double[nAtoms];
    double *oOri = new double[nAtoms];
    double *oO4arri = new double[nAtoms * rsize];
    double *C = new double[2 * (lMax + 1) * (lMax + 1) * nMax];
    // Loop through central points
    for (int i = 0; i < Hs; ++i) {
      auto ix = Hpos[3 * i];
      auto iy = Hpos[3 * i + 1];
      auto iz = Hpos[3 * i + 2];
      // Get all neighbours for the central atom i
      CellListResult result = cellList.getNeighboursForPosition(
          ix /*Hpos[3 * i]*/, iy /*Hpos[3 * i + 1]*/, iz /*Hpos[3 * i + 2]*/);
      // Sort the neighbours by type
      map<int, vector<int>> atomicTypeMap;
      for (const int &idx : result.indices) {
        int Z = atomicNumbers(idx);
        atomicTypeMap[Z].push_back(idx);
      };
      // Loop through neighbours sorted by type
      for (const auto &ZIndexPair : atomicTypeMap) {

        // j is the internal index for this atomic number
        int j = ZIndexMap[ZIndexPair.first];

        // Notice that due to the numerical integration the getDeltas
        // function here has special functionality for positions that are
        // centered on an atom.
        pair<int, int> neighbours = getDeltas(
            dx, dy, dz, ris, rw, rCut, oOri, oO4arri, minExp, pluExp, eta,
            positions, ix, iy, iz, ZIndexPair.second, rsize, i, j);
        const int nNeighbours = neighbours.first;
        const int nCenters = neighbours.second;

        getWeights(nNeighbours + min(nCenters, 1), ris, NULL, false, weighting,
                   weights);
        double *Flir =
            getFlir(oO4arri, ris, minExp, pluExp, nNeighbours, rsize, lMax);
        double *Ylmi = getYlmi(dx, dy, dz, oOri, nNeighbours, lMax);
        double *summed =
            getIntegrand(Flir, Ylmi, rsize, nNeighbours, lMax, weights);
        delete[] Ylmi;
        delete[] Flir;
        double *rw2 = getrw2(rw, rsize);
        getC(C, rw2, gss, summed, rCut, lMax, rsize, nMax, nCenters,
             nNeighbours, eta, weights);
        delete[] summed;
        delete[] rw2;
        accumC(Cs, C, lMax, nMax, j, i, nCoeffs);
      }
    }
    delete[] dx;
    delete[] dy;
    delete[] dz;
    delete[] minExp;
    delete[] pluExp;
    delete[] C;
    delete[] ris;
    delete[] weights;
    delete[] oOri;
    delete[] oO4arri;
  }
  // If inner averaging is requested, average the coefficients over the
  // positions (axis 0 in cnnd matrix) before calculating the power spectrum.
  if (average == "inner") {
    double *CsAve = new double[nCoeffs];

    memset(CsAve, 0.0, nCoeffs * sizeof(double));

    for (int i = 0; i < Hs; ++i) {
      for (int j = 0; j < nCoeffs; ++j) {
        CsAve[j] += Cs[i * nCoeffs + j];
      }
    }
    for (int j = 0; j < nCoeffs; ++j) {
      CsAve[j] = CsAve[j] / static_cast<double>(Hs);
    }
    getP(Ps, CsAve, Nt, lMax, nMax, 1, rCut2, nFeatures, crossover, nCoeffs);
    delete[] CsAve;
    // Average the power spectrum across atoms
  } else if (average == "outer") {
    // We allocate the memory and give array_t a pointer to it. This way
    // the memory is owned and freed by C++.
    double *PsTemp = new double[nFeatures * Hs];
    py::array_t<double> PsTempArrChecked({Hs, nFeatures}, PsTemp);
    auto PsTempArr = PsTempArrChecked.mutable_unchecked<2>();
    getP(PsTempArr, Cs, Nt, lMax, nMax, Hs, rCut2, nFeatures, crossover,
         nCoeffs);
    for (int i = 0; i < Hs; ++i) {
      for (int j = 0; j < nFeatures; ++j) {
        Ps(0, j) += PsTempArr(i, j);
      }
    }
    for (int j = 0; j < nFeatures; ++j) {
      Ps(0, j) = Ps(0, j) / (double)Hs;
    }
    delete[] PsTemp;
    // Regular power spectrum without averaging
  } else {
    getP(Ps, Cs, Nt, lMax, nMax, Hs, rCut2, nFeatures, crossover, nCoeffs);
  }

  delete[] Cs;
}
